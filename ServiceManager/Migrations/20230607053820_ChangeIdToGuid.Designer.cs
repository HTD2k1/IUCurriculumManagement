// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceManager;

#nullable disable

namespace ServiceManager.Migrations
{
    [DbContext(typeof(ServiceContext))]
    [Migration("20230607053820_ChangeIdToGuid")]
    partial class ChangeIdToGuid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Common.MicroserviceModels.MicroService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CurrentStatusId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStatusId");

                    b.ToTable("MicroServices");
                });

            modelBuilder.Entity("Common.MicroserviceModels.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MicroServiceId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MicroServiceId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Common.MicroserviceModels.MicroService", b =>
                {
                    b.HasOne("Common.MicroserviceModels.Status", "CurrentStatus")
                        .WithMany()
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentStatus");
                });

            modelBuilder.Entity("Common.MicroserviceModels.Status", b =>
                {
                    b.HasOne("Common.MicroserviceModels.MicroService", null)
                        .WithMany("StatusLog")
                        .HasForeignKey("MicroServiceId");
                });

            modelBuilder.Entity("Common.MicroserviceModels.MicroService", b =>
                {
                    b.Navigation("StatusLog");
                });
#pragma warning restore 612, 618
        }
    }
}
